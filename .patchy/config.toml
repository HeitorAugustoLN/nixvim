# Main github repository to fetch from.
# This is going to be our base, into which we merge patches and pull requests.
#
# Examples
# 
# repo = "helix-editor/helix"
# repo = "microsoft/vscode"

repo = "nix-community/nixvim"

# The main repository's branch
# 
# Examples
#
# remote-branch = "master"
# remote-branch = "main"
#
# The above always fetch the latest commit.
# -> To use a specific commit, use the following syntax:
#   remote-branch = "<branch> @ <hash-of-commit>"
#
# so for example:
#
# remote-branch = "master @ fccc58957eece10d0818dfa000bf5123e26ee32f"

remote-branch = "main"

# Branch which patchy will use to do all of its work on
#
# Examples
#
# local-branch = "some-branch-1234"

local-branch = "patchy"

# list of pull requests numbers which you would like to merge into the repository and branch you have specified previously
#
# Examples
#
# pull-requests = [ "12254", "10000", "8145" ]
# 
# The above always fetch the latest commit for each pull request.
# 
# To use a specific commit, use the following syntax:
#   "<pull-request-number> @ <hash-of-commit>"
#
# so for example:
#
pull-requests = ["3380", "3379", "3378", "3377", "3368", "3381"]

# Optional: A list of patches to apply
#
# A patch allows you to do specify custom commits and not have to rely on there being a pull request for that change
#
# You can generate patches from a commit with: `patchy gen-patch <commit-hash>`.
# See `patchy gen-patch --help` for more info.
#
# Examples
#
# With the below config, patchy will look for the following files:
# - `.patchy/my-patch123.patch`
# - `.patchy/another-patch.patch`
# - `.patchy/1234.patch`
#
# patches = [ "my-patch123", "another-patch", "1234" ]

patches = []
